// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var aYearAgo, now, svg,
      _this = this;
    console.log("Started");
    now = moment();
    aYearAgo = now.subtract('years', 1);
    console.dir(aYearAgo);
    _.mixin({
      extractStartOfDay: function(items, datePropertyReader) {
        var format,
          _this = this;
        format = d3.time.format("%Y-%m-%d");
        return _.map(items, function(item) {
          var m, startOfDay;
          m = moment(datePropertyReader(item));
          startOfDay = m.startOf('day');
          item['day'] = format(startOfDay.toDate());
          return item;
        });
      },
      joinOnDay: function(itemsArrays) {
        var combined,
          _this = this;
        combined = _.flatten(itemsArrays, true);
        return _.chain(combined).groupBy('day').map(function(itemsForDay) {
          return _.chain(itemsForDay).map(function(item) {
            return _.pairs(item);
          }).flatten(true).object().value();
        }).value();
      }
    });
    svg = dimple.newSvg("#chartContainer", 620, 600);
    return d3.json("/js/data/weight.json", function(weightData) {
      return d3.json("/js/data/fitnessActivities.json", function(activityData) {
        var activityItems, items, myChart, weightItems, x, y1, y2;
        weightItems = _.chain(weightData.items).filter(function(i) {
          return i.weight > 50;
        }).extractStartOfDay(function(item) {
          return item.timestamp;
        }).value();
        console.dir(weightItems);
        activityItems = _.chain(activityData.items).extractStartOfDay(function(item) {
          return item.start_time;
        }).value();
        console.dir(activityItems);
        items = _.chain([weightItems, activityItems]).joinOnDay().filter(function(i) {
          return moment(i.day).isAfter(aYearAgo);
        }).value();
        console.dir(items);
        myChart = new dimple.chart(svg, items);
        myChart.setBounds(60, 30, 505, 305);
        x = myChart.addTimeAxis("x", "day", "%Y-%m-%d", "%Y-%m-%d");
        x.addOrderRule("Date");
        y1 = myChart.addMeasureAxis("y", "weight");
        y1.overrideMin = 80;
        myChart.addSeries(null, dimple.plot.line, [x, y1]);
        y2 = myChart.addMeasureAxis("y", "total_calories");
        myChart.addSeries(null, dimple.plot.bar, [x, y2]);
        return myChart.draw();
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
