// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var aYearAgo, now, svg,
      _this = this;
    console.log("Started");
    now = moment();
    aYearAgo = now.subtract('years', 1);
    console.dir(aYearAgo);
    _.mixin({
      extractStartOfDay: function(items, datePropertyReader) {
        var format,
          _this = this;
        format = d3.time.format("%Y-%m-%d");
        return _.map(items, function(item) {
          var m, startOfDay;
          m = moment(datePropertyReader(item));
          startOfDay = m.startOf('day');
          item['day'] = format(startOfDay.toDate());
          return item;
        });
      },
      joinOnDay: function(itemsArrays) {
        var combined,
          _this = this;
        combined = _.flatten(itemsArrays, true);
        return _.chain(combined).groupBy('day').map(function(itemsForDay) {
          return _.chain(itemsForDay).map(function(item) {
            return _.pairs(item);
          }).flatten(true).object().value();
        }).value();
      },
      fillInGaps: function(items, propertyName) {
        var day, entriesWithPropertyOrderedByDayDesc, filledIn, findClosest, itemsOrderedByDayDesc, minDay,
          _this = this;
        itemsOrderedByDayDesc = _.chain(items).sortBy(function(item) {
          return moment(item.day).unix();
        }).reverse().value();
        entriesWithPropertyOrderedByDayDesc = _.chain(itemsOrderedByDayDesc).filter(function(item) {
          return item[propertyName];
        }).map(function(item) {
          var entry;
          entry = {
            day: item.day
          };
          entry[propertyName] = item[propertyName];
          return entry;
        }).value();
        console.log("Sorted:");
        console.dir(entriesWithPropertyOrderedByDayDesc);
        findClosest = function(day) {
          var entry, found;
          found = _.find(entriesWithPropertyOrderedByDayDesc, function(item) {
            return moment(item.day).unix() <= day.unix();
          });
          if (day.unix() === moment(found.day).unix()) {
            return found;
          } else {
            entry = {
              day: d3.time.format("%Y-%m-%d")(day.toDate())
            };
            entry[propertyName] = found[propertyName];
            return entry;
          }
        };
        minDay = moment(_.last(itemsOrderedByDayDesc).day);
        day = moment(_.min(itemsOrderedByDayDesc).day);
        console.log("" + (day.format("dddd, MMMM Do YYYY, h:mm:ss a")) + " -- " + (minDay.format("dddd, MMMM Do YYYY, h:mm:ss a")));
        filledIn = [];
        while (day.isAfter(minDay)) {
          filledIn.push(findClosest(day));
          day.subtract(1, 'day');
        }
        console.log("Filled in:");
        console.dir(filledIn);
        return filledIn;
      }
    });
    svg = dimple.newSvg("#chartContainer", 1200, 600);
    return d3.json("js/data/weight.json", function(weightData) {
      return d3.json("js/data/fitnessActivities.json", function(activityData) {
        var activityItems, colorAxis, items, myChart, s2, weightItems, x, y1, y2;
        weightItems = _.chain(weightData.items).extractStartOfDay(function(item) {
          return item.timestamp;
        }).fillInGaps('weight').value();
        console.dir(weightItems);
        activityItems = _.chain(activityData.items).extractStartOfDay(function(item) {
          return item.start_time;
        }).filter(function(i) {
          return i.type === "Running";
        }).value();
        console.dir(activityItems);
        items = _.chain([weightItems, activityItems]).joinOnDay().filter(function(i) {
          return moment(i.day).isAfter(aYearAgo);
        }).filter(function(i) {
          return i.weight > 50;
        }).value();
        console.dir(items);
        myChart = new dimple.chart(svg, items);
        myChart.setBounds(60, 30, 1000, 305);
        x = myChart.addTimeAxis("x", "day", "%Y-%m-%d", "%Y-%m-%d");
        x.addOrderRule("Date");
        y1 = myChart.addMeasureAxis("y", "weight");
        y1.overrideMin = 80;
        myChart.addSeries(null, dimple.plot.line, [x, y1]);
        colorAxis = myChart.addColorAxis("total_calories");
        y2 = myChart.addMeasureAxis("y", "total_calories");
        s2 = myChart.addSeries(null, dimple.plot.bar, [x, y2]);
        s2.c = colorAxis;
        return myChart.draw();
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
